#!/bin/bash

# TESTS:
# -----
#
# - Too many lines (*)
# - Too long string (*)
# - Empty file
# - Unexistant file
# - Spaces in between (*)
# - Numeric comparison (--numeric)
# - Wrong usage of parameters (./main -o for example)
# - Border cases (exact many lines or exact long string)
# - No arguments
#
# (*) Test cases

PROGRAM_NAME='main'


function TEST_help() {
    exec_program -h
    [[ $? = 0 ]] && echo OK || echo FAILED
}

function TEST_normal() {
    ./$PROGRAM_NAME -o - inputs/alice.txt
    res=$?
    [[ $res = 0 ]] && echo OK || echo FAILED
}


function exec_program() {
    ./$PROGRAM_NAME $@ > /dev/null 2>&1
}


# Setup
cd $(dirname $0)/..

gcc -w -g -o $PROGRAM_NAME src/main.c
gcc_code=$?
[[ $gcc_code != 0 ]] && exit $gcc_code

# Run tests
success_count=0
for t in $(declare -F | cut -d' ' -f3 | grep -E '^TEST_'); do
    msg=$($t)
    echo $t $msg
    [[ $(echo -n $msg | grep -oE "OK$") == "OK" ]] && success_count=$((success_count+1))
done
echo

count=$(declare -F | cut -d' ' -f3 | grep -E '^TEST_' | wc -l)
echo Success $((100*success_count/count))'%'
echo

echo Running with valgrind...
valgrind ./$PROGRAM_NAME -o /dev/null $(dirname $0)/inputs/text1.txt
valgrind_code=$?
if [[ $valgrind_code = 127 ]]; then
    echo Valgrind not installed
elif [[ $valgrind_code != 0 ]]; then
    echo Valgrind FAILED with code $valgrind_code
fi
